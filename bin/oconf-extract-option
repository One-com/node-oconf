#!/usr/bin/env node
// ex: filetype=javascript

var oconf = require('../lib/index');
var util = require('util');
var optimist = require('optimist');
var argp = optimist
    .option('json', {
        alias: 'j',
        type: 'boolean',
        description: 'Force JSON output'
    })
    .option('help', {
        alias: 'h',
        type: 'boolean',
        description: 'This help text'
    })
    .option('allowmissing', {
        type: 'boolean',
        description: 'Exit silently with no output, if no value was found.'
    })
    .demand(1)
    .usage('Usage: $0 <filename.cjson> <dotted.option.path>');
var argv = argp.argv;

// This is needed as optimist will not force exit when --help is
// passed on it's own, and we want it to.
if (argv.help) {
    argp.showHelp();
    process.exit();
}

function _getKey(keyname, testObj) {
    if (typeof keyname === 'string') {
        keyname = keyname.split(".");
    }

    // An non-existing key doesn't exist!
    if (keyname.length === 0) {
        return {error: 'Not found'};
    }

    var key = keyname.shift();

    // Is it an object -- and does it have the key
    if (testObj !== new Object(testObj) || !(key in testObj)) {
        if (argv.allowmissing) {
            process.exit(0);
        }
        throw new Error('Key ' + key + ' not found in ' + JSON.stringify(testObj));
    }

    // Try more!
    if (keyname.length >= 1) {
        return _getKey(keyname, testObj[key]);
    }

    // We're at the end.
    return testObj[key];
}

try {
    var data = oconf.load(argv._[0], 99, false);

    // Refine if we got a query
    if (argv._.length >= 2) {
        data = _getKey(argv._[1], data);
    }

    if (argv.json || (typeof data !== 'string' && typeof data !== 'number')) {
        data = JSON.stringify(data, 4, false);
    }

    util.puts(data);
} catch (error) {
    console.error("Error:", error.message);
    process.exit(1);
}
