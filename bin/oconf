#!/usr/bin/env node
const oconf = require('../lib/index');
const { Command } = require('commander');
const program = new Command();

program
    .name('oconf')
    .usage('[--lint|--extract-option <option> [--allow-missing-option][--option-as-json]] <file>')
    .option('-h, --help', 'This help text.')
    .option('-i, --ignore <path>', 'Absolute path or glob pattern for ignoring included files.')
    .option('-l, --lint', 'Lint the input file and report any errors.')
    .option('-r, --relaxed', 'Use relaxed JSON format.')
    .option('-p, --public', 'Only values in #public objects will be extracted.')
    .option('-o, --extract-option <option>', 'Extract the value of an option.')
    .option('-j, --option-as-json', 'The extracted value will be extracted as JSON.')
    .option('-m, --allow-missing-option', 'Do not fail when no such value is present.')
    .option('--json', 'JSON output.')
    .option('--allowmissing', 'Allow missing options.')
    .parse();

const argv = program.opts();
argv._ = program.args;

// This is needed as optimist will not force exit when --help is
// passed on it's own, and we want it to.
if (argv.help || argv._.length < 1) {
    program.help();
    process.exit(0);
}

//////////////////////////////////////////////////////////////////
// This is here for backwards compatibility. Used to be an okay
// flag. We can add a deprecation warning later.
if (argv['json']) {
    argv['optionAsJson'] = true;
}
if (argv['allowmissing']) {
    argv['allowMissingOption'] = true;
}
//////////////////////////////////////////////////////////////////

if (!argv['extractOption'] && (argv['optionAsJson'] || argv['allowMissingOption'])) {
    if (argv['optionAsJson']) {
        console.error('The flag --option-as-json does not make sense without the --extract-option flag.');
    } else if (argv['allowMissingOption']) {
        console.error('The flag --allow-missing-option does not make sense without the --extract-option flag.');
    }

    program.help();
    process.exit(1);
}


function _getKey(keyname, testObj) {
    if (typeof keyname === 'string') {
        keyname = keyname.split(".");
    }

    // An non-existing key doesn't exist!
    if (keyname.length === 0) {
        return {error: 'Not found'};
    }

    const key = keyname.shift();

    // Is it an object -- and does it have the key
    if (testObj !== new Object(testObj) || !(key in testObj)) {
        if (argv['allowMissingOption']) {
            process.exit(0);
        }
        throw new Error('Key ' + key + ' not found in ' + JSON.stringify(testObj));
    }

    // Try more!
    if (keyname.length >= 1) {
        return _getKey(keyname, testObj[key]);
    }

    // We're at the end.
    return testObj[key];
}

let config;

try {
    config = oconf.load(argv._, { ignore: argv.ignore, public: argv.public, relaxed: argv.relaxed });
} catch (error) {
    console.error("Error:", error.message);
    process.exit(1);
}

if (argv.lint) {
    console.warn('No linting errors found.');
    process.exit(0);
}

if (argv['extractOption']) {
    try {
        let data = config;

        data = _getKey(argv['extractOption'], data);

        if (!argv['optionAsJson'] && Array.isArray(data)) {
            data = data.join(' ');
        } else if (argv['optionAsJson'] || (typeof data !== 'string' && typeof data !== 'number')) {
            data = JSON.stringify(data, false, 4);
        }

        console.log(data);
    } catch (error) {
        if (!argv['allowMissingOption']) {
            console.error("Error:", error.message);
            process.exit(1);
        }
    }
} else {
    console.log(JSON.stringify(config, false, 4));
}
